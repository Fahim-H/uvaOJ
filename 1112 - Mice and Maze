#include <iostream>
#include <vector>
#include <queue>
#define mx 105
#define INF 100000000000
using namespace std;
struct Node{
    int val;
    int cost;
};
vector <Node> vec[mx];
bool visit[mx];
int dist[mx];
void reset(){
    for(int i=0;i<mx;i++){
        vec[i].clear();
        visit[i]=0;
        dist[i]= INF;
    }
}
class cmp{
    public:
        bool operator()(Node &A,Node &B){
            if(A.cost>B.cost)return true;
            return false;
        }
};
int dijkstra(int source, int time){
    priority_queue <Node,vector<Node>,cmp> PQ;
    PQ.push({source,0});
    int count=0;
    
    while(!PQ.empty()){
        Node current=PQ.top();
        PQ.pop();
        int val=current.val;
        int cost=current.cost;

        if(visit[val]==1)continue;

        dist[val]=cost;
        visit[val]=1;
        
        if(dist[val]<=time){
            count++;
        }

        for(int i=0;i<vec[val].size();i++){
            int next=vec[val][i].val;
            int next_cost=vec[val][i].cost;

            if(visit[next]==0){
                PQ.push({next,cost+next_cost});
            }
        }
    }
    return count;
}
int main(){
    int looper;
    cin>>looper;
    for(int i=1;i<=looper;i++){
        reset();
        int n,e,t,m;
        cin>>n>>e>>t>>m;
        for(int i=1;i<=m;i++){
            int u,v,w; cin>>u>>v>>w;
            vec[v].push_back({u,w});
        }
        int ans=dijkstra(e,t);
        if(i>1)cout<<endl;
        cout<<ans<<endl;
    }
    return 0;
}
